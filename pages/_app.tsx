import type { AppProps } from "next/app";
import Head from "next/head";
import { ThirdwebProvider, useSDK, useSigner } from "@thirdweb-dev/react";
import { CHAIN } from "../const/chains";
import { cn } from "@/lib/utils";
import { Inter as FontSans } from "next/font/google";
import localFont from "next/font/local";
import { LensProvider, development } from "@lens-protocol/react-web";
import { JsonRpcProvider } from "@ethersproject/providers";
import "../styles/globals.css";
import { useTypedDataSignerWrapper } from "@/lib/useTypedDataSigner";
import NetworkSwitchModal from "@/components/NetworkSwitchModal";

const fontSans = FontSans({
  subsets: ["latin"],
  variable: "--font-sans",
});

// Font files can be colocated inside of `pages`
const fontHeading = localFont({
  src: "../assets/fonts/CalSans-SemiBold.woff2",
  variable: "--font-heading",
});

function LensThirdwebProvider({ children }: { children: React.ReactNode }) {
  const sdk = useSDK();
  const signer = useSigner();
  const typedDataSigner = useTypedDataSignerWrapper(signer, sdk);

  if (!typedDataSigner) {
    return <>{children}</>;
  }

  console.log(signer?.provider);

  return (
    <LensProvider
      config={{
        environment: development,
        bindings: {
          getSigner: async () => typedDataSigner,
          getProvider: async () =>
            new JsonRpcProvider("mumbai.rpc.thirdweb.com"),
        },
        // @ts-ignore: TODO
        appId: "backme",
      }}
    >
      {children}
    </LensProvider>
  );
}

function MyApp({ Component, pageProps }: AppProps) {
  return (
    <>
      <Head>
        <title>Backme</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        className={cn(
          "min-h-screen bg-background font-sans antialiased",
          fontSans.variable,
          fontHeading.variable
        )}
      >
        <ThirdwebProvider
          activeChain={CHAIN}
          authConfig={{
            domain: process.env.NEXT_PUBLIC_AUTH_DOMAIN || "evmkit.com",
            authUrl: "/api/auth",
          }}
        >
          <LensThirdwebProvider>
            <NetworkSwitchModal />
            <Component {...pageProps} />
          </LensThirdwebProvider>
        </ThirdwebProvider>
      </main>
    </>
  );
}

export default MyApp;
